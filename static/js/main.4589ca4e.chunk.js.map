{"version":3,"sources":["serviceWorker.ts","enums/ajax-state.enum.ts","models/data-source-type.model.ts","services/todo.service.ts","services/todo-local-storage.service.ts","services/todo-service-helper.ts","contexts/data-source.context.ts","todo/todo.component.tsx","todo-form/todo-form.component.tsx","App.tsx","Root.tsx","themes/default.theme.ts","themes/purple.theme.ts","themes/ice-darkmode.theme.ts","themes/high-contrast.theme.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AjaxState","DataSourceType","localAPI","localStorage","BASE_URL","TodoService","showCompleted","Promise","resolve","reject","Axios","get","baseURL","response","status","data","id","todoItem","put","post","delete","DB_NAME","TodoLocalStorateService","getItem","setItem","JSON","stringify","Array","min","max","Math","floor","random","parse","String","items","setTimeout","_getItems","filter","item","isComplete","_getDelay","find","todo","Error","forEach","Object","assign","_setItems","newItem","length","push","index","findIndex","undefined","splice","initializeTodoService","dataSourceType","DataSourceContext","React","createContext","DataSourceProvider","Provider","Todo","props","todoService","useContext","useState","initial","submissionStatus","setSubmissionStatus","clickedComplete","pending","update","Card","styles","root","textAlign","tokens","padding","childrenGap","width","maxWidth","Section","Stack","horizontal","StackItem","isImportant","Icon","fontSize","FontSizes","xxLarge","iconName","grow","Text","xLarge","name","description","borderTop","getTheme","palette","neutralQuaternary","horizontalAlign","ProgressIndicator","MessageBar","messageBarType","MessageBarType","success","IconButton","onClick","disabled","iconProps","deleteById","onDelete","TodoForm","setName","setDescription","setIsImportant","icon","getIcon","menuProps","calloutProps","calloutMain","selectors","minWidth","isBeakVisible","key","title","directionalHintFixed","TextField","field","fieldGroup","background","white","placeholder","value","borderless","onChange","element","resizable","autoAdjustHeight","multiline","create","onCreate","finally","App","todoItems","setTodoItems","setShowCompleted","loadItems","show","getAll","todos","useEffect","style","large","medium","fontWeight","FontWeights","semilight","semibold","margin","backgroundColor","neutralLighterAlt","concat","addItem","Separator","Toggle","label","defaultChecked","onText","offText","event","checked","align","ActionButton","text","promises","all","clickedDeleteAllItems","map","getById","reloadSingleItem","removeItem","Root","dataSourcetype","setDataSourceType","selectedTheme","setSelectedTheme","selectedThemeTitle","setSelectedThemeTitle","onClickTheme","themeName","setTheme","loadTheme","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","includes","theme","ThemeProvider","semanticColors","bodyBackground","Fabric","CommandBar","position","top","left","zIndex","borderBottom","borderBottomColor","boxShadow","subMenuProps","marginTop","color","href","height","initializeIcons","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4589ca4e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export enum AjaxState {\r\n    initial, pending, success, error\r\n}\r\n","export default abstract class DataSourceType {\r\n    public static localAPI = 'local-api';\r\n    public static localStorage = 'local-storage';\r\n}","import Axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport ITodoItem from '../models/ITodoItem.model';\r\nimport ITodoService from './todo-service.interface';\r\n\r\nconst BASE_URL: string = 'https://localhost:5001/';\r\n\r\nexport default class TodoService implements ITodoService {\r\n\r\n    public getAll(showCompleted:boolean): Promise<ITodoItem[]> {\r\n        return new Promise<ITodoItem[]>((resolve, reject) => {\r\n            Axios.get(`/api/todoitems`, { baseURL: BASE_URL, })\r\n\r\n                .then((response: AxiosResponse) => {\r\n                    if (response.status === 200) {\r\n                        resolve(response.data);\r\n                    } else {\r\n                        console.error(`Status does not indicate success! -> ${response.status}`);\r\n                        reject(response);\r\n                    }\r\n                })\r\n\r\n                .catch((error: AxiosError) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public getById(id: number): Promise<ITodoItem> {\r\n        return new Promise<ITodoItem>((resolve, reject) => {\r\n            Axios.get(`/api/todoitems/${id}`, { baseURL: BASE_URL, })\r\n\r\n                .then((response: AxiosResponse) => {\r\n                    if ((response.status % 200) < 100) {\r\n                        resolve(response.data);\r\n                    } else {\r\n                        console.error(`Status does not indicate success! -> ${response.status}`);\r\n                        reject(response);\r\n                    }\r\n                })\r\n\r\n                .catch((error: AxiosError) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public update(id: number, todoItem: ITodoItem): Promise<ITodoItem> {\r\n        return new Promise<ITodoItem>((resolve, reject) => {\r\n            Axios.put(`/api/todoItems/${id}`, todoItem, { baseURL: BASE_URL })\r\n\r\n                .then((response: AxiosResponse) => {\r\n                    if ((response.status % 200) < 100) {\r\n                        resolve(response.data);\r\n                    } else {\r\n                        console.error(`Status does not indicate success! -> ${response.status}`);\r\n                        reject(response);\r\n                    }\r\n                })\r\n\r\n                .catch((error: AxiosError) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public create(todoItem: ITodoItem): Promise<ITodoItem> {\r\n        return new Promise<ITodoItem>((resolve, reject) => {\r\n            Axios.post(`/api/todoItems/`, todoItem, { baseURL: BASE_URL })\r\n\r\n                .then((response: AxiosResponse) => {\r\n                    if ((response.status % 200) < 100) {\r\n                        resolve(response.data);\r\n                    } else {\r\n                        console.error(`Status does not indicate success! -> ${response.status}`);\r\n                        reject(response);\r\n                    }\r\n                })\r\n\r\n                .catch((error: AxiosError) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public deleteById(id: number): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            Axios.delete(`/api/todoitems/${id}`, { baseURL: BASE_URL, })\r\n\r\n                .then((response: AxiosResponse) => {\r\n                    if ((response.status % 200) < 100) {\r\n                        resolve(response.data);\r\n                    } else {\r\n                        console.error(`Status does not indicate success! -> ${response.status}`);\r\n                        reject(response);\r\n                    }\r\n                })\r\n\r\n                .catch((error: AxiosError) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n}\r\n","import ITodoItem from '../models/ITodoItem.model';\r\nimport ITodoService from './todo-service.interface';\r\n\r\nconst DB_NAME: string = 'todo-Database';\r\n\r\nexport default class TodoLocalStorateService implements ITodoService {\r\n\r\n    constructor() {\r\n        // init local storage db\r\n        if (!localStorage.getItem(DB_NAME)) {\r\n            localStorage.setItem(DB_NAME, JSON.stringify(new Array<ITodoItem>()));\r\n        }\r\n    }\r\n\r\n    // pretend to be remote data\r\n    private _getDelay(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    private _getItems(): ITodoItem[] {\r\n        return JSON.parse(String(localStorage.getItem(DB_NAME)));\r\n    }\r\n\r\n    private _setItems(items: ITodoItem[]): void {\r\n        localStorage.setItem(DB_NAME, JSON.stringify(items));\r\n    }\r\n\r\n    public getAll(showCompleted: boolean) {\r\n        return new Promise<ITodoItem[]>((resolve) => {\r\n            setTimeout(() => {\r\n                if (showCompleted)\r\n                    resolve(\r\n                        this._getItems()\r\n                    )\r\n                else\r\n                    resolve(\r\n                        this._getItems().filter(item => !item.isComplete)\r\n                    );\r\n            }, this._getDelay(100, 1000));\r\n        });\r\n    }\r\n\r\n    public getById(id: number): Promise<ITodoItem> {\r\n        return new Promise<ITodoItem>((resolve, reject) => {\r\n            setTimeout(() => {\r\n                const items: ITodoItem[] = this._getItems();\r\n\r\n                const item = items.find(todo => todo.id === id);\r\n                if (item) resolve(item);\r\n\r\n                reject(new Error('Item does not exist!'));\r\n            }, this._getDelay(100, 1000));\r\n        });\r\n    }\r\n\r\n    public update(id: number, todoItem: ITodoItem): Promise<ITodoItem> {\r\n        return new Promise<ITodoItem>((resolve, reject) => {\r\n            setTimeout(() => {\r\n\r\n                const items: ITodoItem[] = this._getItems();\r\n\r\n                items.forEach(item => {\r\n                    if (item.id === id) {\r\n                        Object.assign(item, todoItem);\r\n                        this._setItems(items);\r\n                        resolve(todoItem);\r\n                    }\r\n                });\r\n\r\n                reject(new Error('Item does not exist!'));\r\n            }, this._getDelay(100, 1000));\r\n        });\r\n    }\r\n\r\n    public create(todoItem: ITodoItem): Promise<ITodoItem> {\r\n        return new Promise<ITodoItem>((resolve) => {\r\n            setTimeout(() => {\r\n                const items: ITodoItem[] = this._getItems();\r\n                const newItem: ITodoItem = { ...todoItem, id: items.length + 1 };\r\n                items.push(newItem);\r\n                this._setItems(items);\r\n\r\n                resolve(newItem);\r\n            }, this._getDelay(100, 1000));\r\n        });\r\n    }\r\n\r\n    public deleteById(id: number): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            setTimeout(() => {\r\n                const items: ITodoItem[] = this._getItems();\r\n                const index = items.findIndex(item => item.id === id);\r\n                if (index !== undefined) items.splice(index, 1);\r\n                this._setItems(items);\r\n\r\n                resolve();\r\n            }, this._getDelay(100, 1000));\r\n        });\r\n    }\r\n}\r\n","import DataSourceType from '../models/data-source-type.model'\r\nimport TodoService from './todo.service';\r\nimport TodoLocalStorateService from './todo-local-storage.service';\r\n\r\nexport const initializeTodoService = (dataSourceType: string) => {\r\n    switch (dataSourceType) {\r\n        case DataSourceType.localAPI:\r\n            return new TodoService();\r\n\r\n        default:\r\n            return new TodoLocalStorateService();\r\n    }\r\n};\r\n","import React from 'react'\r\n\r\nconst DataSourceContext = React.createContext('')\r\n\r\nexport const DataSourceProvider = DataSourceContext.Provider\r\nexport default DataSourceContext","import React, { useState, useContext } from 'react';\r\nimport { Card, } from '@uifabric/react-cards';\r\nimport {\r\n    Text,\r\n    Icon,\r\n    IconButton,\r\n    StackItem,\r\n    Stack,\r\n    FontSizes,\r\n    MessageBar,\r\n    MessageBarType,\r\n    ProgressIndicator,\r\n    getTheme\r\n} from 'office-ui-fabric-react';\r\n\r\nimport ITodoItem from '../models/ITodoItem.model';\r\nimport ITodoService from '../services/todo-service.interface';\r\nimport { AjaxState } from '../enums/ajax-state.enum';\r\nimport { initializeTodoService } from '../services/todo-service-helper';\r\nimport DataSourceContext from '../contexts/data-source.context';\r\n\r\nconst Todo = (props: { item: ITodoItem, onUpdate: Function, onDelete: Function }) => {\r\n\r\n    const todoService: ITodoService =\r\n        initializeTodoService(useContext(DataSourceContext));\r\n\r\n    const [submissionStatus, setSubmissionStatus] = useState<AjaxState>(AjaxState.initial);\r\n\r\n    const clickedComplete = () => {\r\n        setSubmissionStatus(AjaxState.pending);\r\n        todoService.update(props.item.id, { ...props.item, isComplete: true, })\r\n\r\n            .then(() => {\r\n                // set initial because we already have a message bar for completed todos\r\n                setSubmissionStatus(AjaxState.initial);\r\n\r\n                props.onUpdate(props.item.id);\r\n            })\r\n\r\n            .catch(() => {\r\n                console.error(`Failed to update!`);\r\n                setSubmissionStatus(AjaxState.error);\r\n                setTimeout(() => {\r\n                    setSubmissionStatus(AjaxState.initial);\r\n                }, 3000);\r\n            });\r\n    };\r\n\r\n    const clickedDelete = () => {\r\n        setSubmissionStatus(AjaxState.pending);\r\n        todoService.deleteById(props.item.id)\r\n\r\n            .then(() => {\r\n                props.onDelete(props.item.id);\r\n            })\r\n\r\n            .catch(() => {\r\n                console.error(`Failed to delete!`);\r\n                setSubmissionStatus(AjaxState.error);\r\n                setTimeout(() => {\r\n                    setSubmissionStatus(AjaxState.initial);\r\n                }, 3000);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card styles={{ root: { textAlign: 'initial' } }} tokens={{ padding: 5, childrenGap: 5, width: '100%', maxWidth: '-webkit-fill-available' }}>\r\n\r\n                {/* HEADING */}\r\n                <Card.Section tokens={{ padding: 4 }}>\r\n                    <Stack horizontal tokens={{ childrenGap: 12 }}>\r\n                        <StackItem>\r\n                            {props.item.isImportant &&\r\n                                <Icon styles={{ root: { fontSize: FontSizes.xxLarge } }} iconName=\"LightningBolt\"></Icon>\r\n                            }\r\n                            {!props.item.isImportant &&\r\n                                <Icon styles={{ root: { fontSize: FontSizes.xxLarge } }} iconName=\"DietPlanNotebook\"></Icon>\r\n                            }\r\n                        </StackItem>\r\n                        <StackItem grow>\r\n                            <Text styles={{ root: { fontSize: FontSizes.xLarge } }}>\r\n                                {props.item.name}\r\n                            </Text>\r\n                        </StackItem>\r\n                    </Stack>\r\n\r\n                </Card.Section>\r\n\r\n                {/* DESCRIPTION */}\r\n                {props.item.description &&\r\n                    <Card.Section tokens={{ padding: 4 }} styles={{ root: { borderTop: `solid 1px ${getTheme().palette.neutralQuaternary}` } }}>\r\n                        <Text>{props.item.description}</Text>\r\n                    </Card.Section>\r\n                }\r\n\r\n                {/* BUTTONS & MESSAGES*/}\r\n                <Card.Section tokens={{ padding: 4 }} horizontalAlign={\"end\"} horizontal styles={{ root: { borderTop: `solid 1px ${getTheme().palette.neutralQuaternary}` } }}>\r\n\r\n                    {/* AJAX STATE */}\r\n                    {submissionStatus === AjaxState.pending &&\r\n                        <StackItem grow>\r\n                            <ProgressIndicator />\r\n                        </StackItem>\r\n                    }\r\n\r\n                    {/* AJAX STATE */}\r\n                    {submissionStatus === AjaxState.error &&\r\n                        <StackItem grow>\r\n                            <MessageBar messageBarType={MessageBarType.error}>\r\n                                Operation failed!\r\n                                </MessageBar>\r\n                        </StackItem>\r\n                    }\r\n\r\n                    {/* COMLETION INDICATOR */}\r\n                    {(props.item.isComplete &&\r\n                        submissionStatus === AjaxState.initial) &&\r\n                        <StackItem grow>\r\n                            <MessageBar messageBarType={MessageBarType.success}>\r\n                                Completed!\r\n                            </MessageBar>\r\n                        </StackItem>\r\n                    }\r\n                    <IconButton onClick={() => clickedComplete()}\r\n                        disabled={props.item.isComplete}\r\n                        iconProps={{ iconName: 'Completed' }}></IconButton>\r\n                    <IconButton onClick={() => clickedDelete()} iconProps={{ iconName: 'RecycleBin' }}></IconButton>\r\n                </Card.Section>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useContext } from 'react'\r\nimport { Card } from '@uifabric/react-cards';\r\nimport { FontSizes, getTheme, Stack, StackItem, MessageBar, MessageBarType, IconButton, TextField, ProgressIndicator } from 'office-ui-fabric-react';\r\n\r\nimport ITodoService from '../services/todo-service.interface';\r\nimport ITodoItem from '../models/ITodoItem.model';\r\nimport { AjaxState } from '../enums/ajax-state.enum';\r\nimport { initializeTodoService } from '../services/todo-service-helper';\r\nimport DataSourceContext from '../contexts/data-source.context';\r\n\r\nconst TodoForm = (props: { onCreate: Function }) => {\r\n\r\n    const todoService: ITodoService =\r\n        initializeTodoService(useContext(DataSourceContext));\r\n\r\n    const [name, setName] = useState<string>(String());\r\n    const [description, setDescription] = useState<string>(String());\r\n    const [isImportant, setIsImportant] = useState<boolean | undefined>(undefined);\r\n\r\n    const [submissionStatus, setSubmissionStatus] = useState<AjaxState>(AjaxState.initial);\r\n\r\n    const clickedSubmit = () => {\r\n        setSubmissionStatus(AjaxState.pending);\r\n\r\n        // use non important as default\r\n        if (isImportant === undefined) setIsImportant(false);\r\n        todoService.create({ name, description, isComplete: false, isImportant } as ITodoItem)\r\n\r\n            .then((newItem: ITodoItem) => {\r\n                setSubmissionStatus(AjaxState.success);\r\n                props.onCreate(newItem);\r\n\r\n                // reset fields for next todo\r\n                setName(String());\r\n                setDescription(String());\r\n                setIsImportant(undefined);\r\n            })\r\n\r\n            .catch(error => {\r\n                console.error('Failed to create');\r\n                setSubmissionStatus(AjaxState.error);\r\n            })\r\n\r\n            .finally(() => {\r\n                // reset submission button\r\n                setTimeout(() => {\r\n                    setSubmissionStatus(AjaxState.initial);\r\n                }, 3000);\r\n            })\r\n    };\r\n\r\n    const getIcon = () => {\r\n        switch (isImportant) {\r\n            case false:\r\n                return 'DietPlanNotebook';\r\n            case true:\r\n                return 'LightningBolt';\r\n            default:\r\n                return 'CircleAddition';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Card styles={{ root: { textAlign: 'initial' } }} tokens={{ padding: 5, childrenGap: 5, width: '100%', maxWidth: '-webkit-fill-available' }}>\r\n                    <Card.Section tokens={{ padding: 4 }}>\r\n                        <Stack horizontal tokens={{ childrenGap: 12 }}>\r\n                            <StackItem>\r\n                                <IconButton styles={{ icon: { fontSize: FontSizes.xxLarge } }}\r\n                                    iconProps={{ iconName: getIcon() }}\r\n                                    menuProps={{\r\n                                        calloutProps: {\r\n                                            styles: {\r\n                                                calloutMain: {\r\n                                                    selectors: {\r\n                                                        'div': {\r\n                                                            minWidth: 'unset',\r\n                                                        },\r\n                                                        'i': {\r\n                                                            fontSize: FontSizes.xLarge\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        },\r\n                                        isBeakVisible: true,\r\n                                        items: [\r\n                                            {\r\n                                                key: 'nonImportant',\r\n                                                name: 'Common',\r\n                                                title: 'not important',\r\n                                                onClick: () => setIsImportant(false),\r\n                                                iconProps: { iconName: 'DietPlanNotebook' }\r\n                                            },\r\n                                            {\r\n                                                key: 'Important',\r\n                                                name: 'Important',\r\n                                                title: 'important',\r\n                                                onClick: () => setIsImportant(true),\r\n                                                iconProps: { iconName: 'LightningBolt' }\r\n                                            }\r\n                                        ],\r\n                                        directionalHintFixed: true\r\n                                    }} ></IconButton>\r\n                            </StackItem>\r\n                            <StackItem grow>\r\n                                <TextField styles={{\r\n                                    root: {},\r\n                                    field: { fontSize: FontSizes.xLarge },\r\n                                    fieldGroup: {\r\n                                        background: 'none',\r\n                                        selectors: {\r\n                                            '&:hover': {\r\n                                                background: getTheme().palette.white\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                                    placeholder={'Add your title here'}\r\n                                    value={name}\r\n                                    borderless\r\n                                    onChange={(element, value) => setName(String(value))}></TextField>\r\n                            </StackItem>\r\n                        </Stack>\r\n\r\n                    </Card.Section>\r\n                    <Card.Section tokens={{ padding: 4 }} styles={{ root: { borderTop: `solid 1px ${getTheme().palette.neutralQuaternary}` } }}>\r\n                        <TextField styles={{\r\n                            root: {},\r\n                            fieldGroup: {\r\n                                background: 'none',\r\n                                selectors: {\r\n                                    '&:hover': {\r\n                                        background: getTheme().palette.white\r\n                                    }\r\n                                }\r\n                            }\r\n                        }}\r\n                            placeholder={'Add your description here'}\r\n                            value={description}\r\n                            resizable={false}\r\n                            autoAdjustHeight\r\n                            multiline\r\n                            borderless\r\n                            onChange={(element, value) => setDescription(String(value))}></TextField>\r\n                    </Card.Section>\r\n\r\n                    {/* BUTTONS & MESSAGES*/}\r\n                    <Card.Section tokens={{ padding: 4 }} horizontalAlign={\"end\"} horizontal styles={{ root: { borderTop: `solid 1px ${getTheme().palette.neutralQuaternary}` } }}>\r\n                        {submissionStatus === AjaxState.pending &&\r\n                            <StackItem grow>\r\n                                <ProgressIndicator />\r\n                            </StackItem>\r\n                        }\r\n\r\n                        {submissionStatus === AjaxState.success &&\r\n                            <StackItem grow>\r\n                                <MessageBar messageBarType={MessageBarType.success}>\r\n                                    Added your todo!\r\n                                </MessageBar>\r\n                            </StackItem>\r\n                        }\r\n\r\n                        {submissionStatus === AjaxState.error &&\r\n                            <StackItem grow>\r\n                                <MessageBar messageBarType={MessageBarType.error}>\r\n                                    Could not add your todo!\r\n                                </MessageBar>\r\n                            </StackItem>\r\n                        }\r\n                        <IconButton onClick={() => clickedSubmit()}\r\n                            disabled={!name || submissionStatus === AjaxState.pending}\r\n                            iconProps={{ iconName: 'Add' }}></IconButton>\r\n                    </Card.Section>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n  Separator,\r\n  Text,\r\n  Stack,\r\n  StackItem,\r\n  FontSizes,\r\n  FontWeights,\r\n  Toggle,\r\n  ActionButton,\r\n  getTheme\r\n} from 'office-ui-fabric-react';\r\n\r\nimport Todo from './todo/todo.component';\r\nimport ITodoItem from './models/ITodoItem.model';\r\n\r\nimport ITodoService from './services/todo-service.interface';\r\nimport TodoForm from './todo-form/todo-form.component';\r\nimport DataSourceContext from './contexts/data-source.context';\r\nimport { initializeTodoService } from './services/todo-service-helper';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const [todoItems, setTodoItems] = useState(new Array<ITodoItem>());\r\n  const [showCompleted, setShowCompleted] = useState<boolean>(true);\r\n\r\n  const todoService: ITodoService =\r\n    initializeTodoService(useContext(DataSourceContext));\r\n\r\n  const reloadSingleItem = (id: number) => {\r\n    console.log(`Reloading item: ${id}`);\r\n\r\n    todoService.getById(id)\r\n\r\n      .then(todoItem => {\r\n        // replace updated item\r\n        setTodoItems(todoItems.map(item => {\r\n          if (item.id === todoItem.id) {\r\n            return todoItem\r\n          };\r\n          return item;\r\n        }));\r\n      })\r\n  };\r\n\r\n  const removeItem = (id: number) => {\r\n    console.log(`Removing item: ${id}`);\r\n\r\n    setTodoItems(todoItems.filter(item => item.id !== id));\r\n  };\r\n\r\n  const addItem = (todoItem: ITodoItem) => {\r\n    console.log(`Adding item: ${todoItem.id}`);\r\n\r\n    // Array.prototyle.push return new length instead of new array -> I use concat\r\n    setTodoItems(todoItems.concat(todoItem));\r\n  }\r\n\r\n  const loadItems = (show: boolean) => {\r\n    return new Promise<any>((resolve, reject) => {\r\n      todoService.getAll(show)\r\n\r\n        .then((todos: ITodoItem[]) => { setTodoItems(todos); resolve() })\r\n\r\n        .catch(error => { console.error(error); reject() });\r\n    });\r\n  };\r\n\r\n  const toggleShowCompleted = (value: boolean) => {\r\n    setShowCompleted(value);\r\n    loadItems(value);\r\n  };\r\n\r\n  const clickedDeleteAllItems = () => {\r\n    const promises = new Array<Promise<any>>();\r\n    todoItems.forEach(item => {\r\n      if (item.isComplete)\r\n        promises.push(todoService.deleteById(item.id));\r\n    });\r\n    Promise.all(promises)\r\n\r\n      .then(() => loadItems(showCompleted))\r\n\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  //component did mount\r\n  useEffect(() => {\r\n    loadItems(showCompleted);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <Text styles={{ root: { fontSize: FontSizes.large } }}>My todo app in react</Text>\r\n      <br />\r\n      {\r\n        todoItems &&\r\n        <Text styles={{\r\n          root: {\r\n            fontSize: FontSizes.medium,\r\n            fontWeight: FontWeights.semilight,\r\n            selectors: { 'span': { fontWeight: FontWeights.semibold } }\r\n          }\r\n        }}>I found <span>{todoItems.length}</span> todos for you.</Text>\r\n      }\r\n      <Stack styles={{\r\n        root: {\r\n          margin: 'auto',\r\n          maxWidth: '60%',\r\n          minWidth: 350\r\n        }\r\n      }} tokens={{ childrenGap: 12, padding: 8 }}>\r\n        <StackItem styles={{\r\n          root: { backgroundColor: getTheme().palette.neutralLighterAlt }\r\n        }} grow={1} >\r\n          <TodoForm onCreate={(todoItem: ITodoItem) => addItem(todoItem)}></TodoForm>\r\n        </StackItem>\r\n        <Separator></Separator>\r\n\r\n        <StackItem styles={{ root: { textAlign: 'initial' } }}>\r\n          <Stack horizontal>\r\n            <StackItem grow>\r\n              <Toggle label=\"Show completed todos\" defaultChecked onText=\"On\" offText=\"Off\"\r\n                onChange={(event, checked) => toggleShowCompleted(Boolean(checked))} />\r\n            </StackItem>\r\n            <StackItem align='end'>\r\n              <ActionButton iconProps={{ iconName: 'RecycleBin' }}\r\n                text='Delete completed todos'\r\n                onClick={() => clickedDeleteAllItems()}></ActionButton>\r\n            </StackItem>\r\n          </Stack>\r\n        </StackItem>\r\n        {todoItems.map((todo) => {\r\n          return (\r\n            <StackItem key={todo.id} styles={{ root: { backgroundColor: getTheme().palette.neutralLighterAlt } }} grow={1} >\r\n              <Todo item={todo} onUpdate={(id: number) => reloadSingleItem(id)} onDelete={(id: number) => removeItem(id)}></Todo>\r\n            </StackItem>\r\n          );\r\n        })}\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { ThemeProvider } from '@uifabric/foundation';\r\nimport { Fabric, CommandBar, Text, getTheme, ITheme } from 'office-ui-fabric-react';\r\n\r\nimport App from './App';\r\nimport DataSourceType from './models/data-source-type.model';\r\nimport { DataSourceProvider } from './contexts/data-source.context';\r\nimport { PurpleTheme, loadPurpleTheme } from './themes/purple.theme';\r\nimport { IceDarkmodeTheme, loadIceDarkmodeTheme } from './themes/ice-darkmode.theme';\r\nimport { DefaultTheme, loadDefaultTheme } from './themes/default.theme';\r\nimport { HighContrastTheme, loadHightContrastTheme } from './themes/high-contrast.theme';\r\n\r\nconst Root: React.FC = () => {\r\n\r\n    const [dataSourcetype, setDataSourceType] = useState<string>(DataSourceType.localStorage);\r\n    const [selectedTheme, setSelectedTheme] = useState<ITheme>();\r\n    const [selectedThemeTitle, setSelectedThemeTitle] = useState<string>(DefaultTheme);\r\n\r\n    const onClickTheme = (themeName: string) => {\r\n        // save theme across sessions\r\n        localStorage.setItem('Theme', themeName);\r\n\r\n        setTheme(themeName);\r\n    };\r\n\r\n    const setTheme = (themeName: string) => {\r\n        setSelectedThemeTitle(themeName);\r\n        switch (themeName) {\r\n            case PurpleTheme:\r\n                setSelectedTheme(loadPurpleTheme());\r\n                break;\r\n            case IceDarkmodeTheme:\r\n                setSelectedTheme(loadIceDarkmodeTheme());\r\n                break;\r\n            case HighContrastTheme:\r\n                setSelectedTheme(loadHightContrastTheme());\r\n                break;\r\n            default:\r\n                setSelectedTheme(loadDefaultTheme());\r\n                break;\r\n        }\r\n    }\r\n\r\n    //component did mount\r\n    useEffect(() => {\r\n        // initialize data type context\r\n        console.log(window.location.hostname);\r\n        if (window.location.hostname.includes('github.io')) {\r\n            setDataSourceType(DataSourceType.localStorage);\r\n        }\r\n\r\n        // load theme if saved in local storage\r\n        const theme = localStorage.getItem('Theme');\r\n        if (theme)\r\n            setTheme(theme);\r\n\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        <ThemeProvider theme={selectedTheme}>\r\n            <DataSourceProvider value={dataSourcetype}>\r\n                <div style={{ backgroundColor: getTheme().semanticColors.bodyBackground }}>\r\n                    <Fabric styles={{ root: { backgroundColor: getTheme().palette.neutralLighterAlt } }}>\r\n\r\n                        {/* TOP MENU */}\r\n                        <CommandBar styles={{\r\n                            root: {\r\n                                position: 'fixed',\r\n                                top: 0,\r\n                                left: 0,\r\n                                zIndex: 1000,\r\n                                width: '100%',\r\n                                borderBottom: `solid 1px`,\r\n                                borderBottomColor: getTheme().palette.themePrimary,\r\n                                boxShadow: `rgba(0, 0, 0, 0.133) 0px 1.6px 3.6px 0px, rgba(0, 0, 0, 0.11) 0px 0.3px 0.9px 0px`\r\n                            }\r\n                        }}\r\n                            items={[\r\n                                {\r\n                                    key: 'theme',\r\n                                    iconProps: { iconName: 'Color' },\r\n                                    text: 'Theme',\r\n                                    subMenuProps: {\r\n                                        items: [\r\n                                            {\r\n                                                key: DefaultTheme,\r\n                                                iconProps: { iconName: selectedThemeTitle === DefaultTheme ? 'ColorSolid' : 'Color' },\r\n                                                text: 'Default',\r\n                                                onClick: () => onClickTheme(DefaultTheme)\r\n                                            },\r\n                                            {\r\n                                                key: PurpleTheme,\r\n                                                iconProps: { iconName: selectedThemeTitle === PurpleTheme ? 'ColorSolid' : 'Color' },\r\n                                                text: 'Purple',\r\n                                                onClick: () => onClickTheme(PurpleTheme)\r\n                                            },\r\n                                            {\r\n                                                key: IceDarkmodeTheme,\r\n                                                iconProps: { iconName: selectedThemeTitle === IceDarkmodeTheme ? 'ColorSolid' : 'Color' },\r\n                                                text: 'Ice Darkmode',\r\n                                                onClick: () => onClickTheme(IceDarkmodeTheme)\r\n                                            }, {\r\n                                                key: HighContrastTheme,\r\n                                                iconProps: { iconName: selectedThemeTitle === HighContrastTheme ? 'ColorSolid' : 'Color' },\r\n                                                text: 'High Contrast',\r\n                                                onClick: () => onClickTheme(HighContrastTheme)\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            ]} />\r\n\r\n                        {/* APP CONTAINER */}\r\n                        <div style={{ marginTop: 44 }}>\r\n                            <App />\r\n                        </div>\r\n\r\n                        {/* FOOTER */}\r\n                        <div style={{\r\n                            textAlign: 'center',\r\n                            marginTop: 12\r\n                        }}>\r\n                            <Text styles={{\r\n                                root: {\r\n\r\n                                }\r\n                            }}>Find repository under <a style={{ color: getTheme().palette.themePrimary }} href='https://github.com/Oshimani/todo-react'>https://github.com/Oshimani/todo-react</a>.</Text>\r\n                        </div>\r\n                    </Fabric>\r\n                </div>\r\n            </DataSourceProvider>\r\n            <div style={{\r\n                backgroundColor: getTheme().semanticColors.bodyBackground,\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                height: '100%',\r\n                width: '100%',\r\n                zIndex: -1000\r\n            }}></div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default Root;\r\n","import { loadTheme } from 'office-ui-fabric-react';\r\n\r\nexport const DefaultTheme: string = 'default';\r\nexport const loadDefaultTheme = () => {\r\n    return (\r\n        loadTheme({\r\n            palette: {\r\n                themePrimary: '#0078d4',\r\n                themeLighterAlt: '#f3f9fd',\r\n                themeLighter: '#d0e7f8',\r\n                themeLight: '#a9d3f2',\r\n                themeTertiary: '#5ca9e5',\r\n                themeSecondary: '#1a86d9',\r\n                themeDarkAlt: '#006cbe',\r\n                themeDark: '#005ba1',\r\n                themeDarker: '#004377',\r\n                neutralLighterAlt: '#f8f8f8',\r\n                neutralLighter: '#f4f4f4',\r\n                neutralLight: '#eaeaea',\r\n                neutralQuaternaryAlt: '#dadada',\r\n                neutralQuaternary: '#d0d0d0',\r\n                neutralTertiaryAlt: '#c8c8c8',\r\n                neutralTertiary: '#bab8b7',\r\n                neutralSecondary: '#a3a2a0',\r\n                neutralPrimaryAlt: '#8d8b8a',\r\n                neutralPrimary: '#323130',\r\n                neutralDark: '#605e5d',\r\n                black: '#494847',\r\n                white: '#ffffff',\r\n            }\r\n        })\r\n    );\r\n};\r\n","import { loadTheme } from 'office-ui-fabric-react';\r\nexport const PurpleTheme: string = 'purple';\r\nexport const loadPurpleTheme = () => {\r\n    return (\r\n        loadTheme({\r\n            palette: {\r\n                themePrimary: '#7a00d4',\r\n                themeLighterAlt: '#f9f3fd',\r\n                themeLighter: '#e7d0f8',\r\n                themeLight: '#d3a9f2',\r\n                themeTertiary: '#ab5ce5',\r\n                themeSecondary: '#881ad9',\r\n                themeDarkAlt: '#6e00be',\r\n                themeDark: '#5d00a1',\r\n                themeDarker: '#440077',\r\n                neutralLighterAlt: '#f8f8f8',\r\n                neutralLighter: '#f4f4f4',\r\n                neutralLight: '#eaeaea',\r\n                neutralQuaternaryAlt: '#dadada',\r\n                neutralQuaternary: '#d0d0d0',\r\n                neutralTertiaryAlt: '#c8c8c8',\r\n                neutralTertiary: '#bab8b7',\r\n                neutralSecondary: '#a3a2a0',\r\n                neutralPrimaryAlt: '#8d8b8a',\r\n                neutralPrimary: '#323130',\r\n                neutralDark: '#605e5d',\r\n                black: '#494847',\r\n                white: '#ffffff',\r\n            }\r\n        })\r\n    );\r\n};\r\n","import { loadTheme } from 'office-ui-fabric-react';\r\nexport const IceDarkmodeTheme: string = 'ice-darkmode';\r\nexport const loadIceDarkmodeTheme = () => {\r\n    return (\r\n        loadTheme({\r\n            palette: {\r\n                themePrimary: '#00c7d4',\r\n                themeLighterAlt: '#000808',\r\n                themeLighter: '#002022',\r\n                themeLight: '#003c3f',\r\n                themeTertiary: '#00777f',\r\n                themeSecondary: '#00afba',\r\n                themeDarkAlt: '#16ccd8',\r\n                themeDark: '#35d4de',\r\n                themeDarker: '#66dfe7',\r\n                neutralLighterAlt: '#2c2c2c',\r\n                neutralLighter: '#353535',\r\n                neutralLight: '#434343',\r\n                neutralQuaternaryAlt: '#4b4b4b',\r\n                neutralQuaternary: '#525252',\r\n                neutralTertiaryAlt: '#707070',\r\n                neutralTertiary: '#f3f3f3',\r\n                neutralSecondary: '#f5f5f5',\r\n                neutralPrimaryAlt: '#f7f7f7',\r\n                neutralPrimary: '#ededed',\r\n                neutralDark: '#fbfbfb',\r\n                black: '#fdfdfd',\r\n                white: '#232323',\r\n            }\r\n        })\r\n    );\r\n};\r\n","import { loadTheme } from 'office-ui-fabric-react';\r\nexport const HighContrastTheme: string = 'high-contrast';\r\nexport const loadHightContrastTheme = () => {\r\n    return (\r\n        loadTheme({\r\n            palette: {\r\n                themePrimary: '#faf400',\r\n                themeLighterAlt: '#0a0a00',\r\n                themeLighter: '#282700',\r\n                themeLight: '#4b4900',\r\n                themeTertiary: '#969300',\r\n                themeSecondary: '#dcd700',\r\n                themeDarkAlt: '#fbf619',\r\n                themeDark: '#fcf73c',\r\n                themeDarker: '#fcf96f',\r\n                neutralLighterAlt: '#1d1d1d',\r\n                neutralLighter: '#262626',\r\n                neutralLight: '#353535',\r\n                neutralQuaternaryAlt: '#3e3e3e',\r\n                neutralQuaternary: '#454545',\r\n                neutralTertiaryAlt: '#656565',\r\n                neutralTertiary: '#fcfcfc',\r\n                neutralSecondary: '#fcfcfc',\r\n                neutralPrimaryAlt: '#fdfdfd',\r\n                neutralPrimary: '#fafafa',\r\n                neutralDark: '#fefefe',\r\n                black: '#fefefe',\r\n                white: '#121212',\r\n            }\r\n        })\r\n    );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { initializeIcons } from 'office-ui-fabric-react';\r\nimport Root from './Root';\r\ninitializeIcons();\r\n\r\nReactDOM.render(\r\n    <Root />\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}