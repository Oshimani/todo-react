{"version":3,"sources":["enums/ajax-state.enum.ts","models/data-source-type.model.ts","services/todo.service.ts","services/todo-local-storage.service.ts","services/todo-service-helper.ts","contexts/data-source.context.ts","todo/todo.component.tsx","todo-form/todo-form.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AjaxState","DataSourceType","localAPI","localStorage","BASE_URL","TodoService","Promise","resolve","reject","Axios","get","baseURL","then","response","status","data","console","error","catch","id","todoItem","put","post","delete","DB_NAME","TodoLocalStorateService","getItem","setItem","JSON","stringify","Array","min","max","Math","floor","random","parse","String","items","setTimeout","_getItems","_getDelay","item","find","todo","Error","forEach","Object","assign","_setItems","newItem","length","push","index","findIndex","splice","initializeTodoService","dataSourceType","DataSourceContext","React","createContext","DataSourceProvider","Provider","Todo","props","todoService","useContext","useState","initial","submissionStatus","setSubmissionStatus","clickedComplete","pending","update","isComplete","updatedTodo","onUpdate","Card","styles","root","textAlign","tokens","padding","childrenGap","width","maxWidth","Section","Stack","horizontal","StackItem","isImportant","Icon","fontSize","FontSizes","xxLarge","iconName","grow","Text","xLarge","name","description","borderTop","DefaultPalette","neutralQuaternary","horizontalAlign","ProgressIndicator","MessageBar","messageBarType","MessageBarType","success","IconButton","onClick","disabled","iconProps","deleteById","onDelete","TodoForm","setName","setDescription","undefined","setIsImportant","icon","getIcon","menuProps","calloutProps","calloutMain","selectors","minWidth","isBeakVisible","key","title","directionalHintFixed","TextField","field","fieldGroup","background","white","placeholder","value","borderless","onChange","element","resizable","autoAdjustHeight","multiline","create","onCreate","finally","App","todoItems","setTodoItems","useEffect","getAll","todos","style","large","medium","fontWeight","FontWeights","semilight","semibold","margin","backgroundColor","neutralLighterAlt","log","concat","addItem","Separator","map","getById","reloadSingleItem","filter","removeItem","Boolean","window","location","hostname","match","initializeIcons","dataSourcetype","includes","ReactDOM","render","Fabric","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kKAAYA,E,yJAAAA,O,qBAAAA,I,qBAAAA,I,qBAAAA,I,kBAAAA,M,iBCAkBC,E,kCAAAA,EACZC,SAAW,YADCD,EAEZE,aAAe,gB,6BCE3BC,EAAmB,0BAEJC,E,iGAGb,OAAO,IAAIC,SAAqB,SAACC,EAASC,GACtCC,IAAMC,IAAN,iBAA4B,CAAEC,QAASP,IAElCQ,MAAK,SAACC,GACqB,MAApBA,EAASC,OACTP,EAAQM,EAASE,OAEjBC,QAAQC,MAAR,+CAAsDJ,EAASC,SAC/DN,EAAOK,OAIdK,OAAM,SAACD,GACJT,EAAOS,W,8BAKRE,GACX,OAAO,IAAIb,SAAmB,SAACC,EAASC,GACpCC,IAAMC,IAAN,yBAA4BS,GAAM,CAAER,QAASP,IAExCQ,MAAK,SAACC,GACEA,EAASC,OAAS,IAAO,IAC1BP,EAAQM,EAASE,OAEjBC,QAAQC,MAAR,+CAAsDJ,EAASC,SAC/DN,EAAOK,OAIdK,OAAM,SAACD,GACJT,EAAOS,W,6BAKTE,EAAYC,GACtB,OAAO,IAAId,SAAmB,SAACC,EAASC,GACpCC,IAAMY,IAAN,yBAA4BF,GAAMC,EAAU,CAAET,QAASP,IAElDQ,MAAK,SAACC,GACEA,EAASC,OAAS,IAAO,IAC1BP,EAAQM,EAASE,OAEjBC,QAAQC,MAAR,+CAAsDJ,EAASC,SAC/DN,EAAOK,OAIdK,OAAM,SAACD,GACJT,EAAOS,W,6BAKTG,GACV,OAAO,IAAId,SAAmB,SAACC,EAASC,GACpCC,IAAMa,KAAN,kBAA8BF,EAAU,CAAET,QAASP,IAE9CQ,MAAK,SAACC,GACEA,EAASC,OAAS,IAAO,IAC1BP,EAAQM,EAASE,OAEjBC,QAAQC,MAAR,+CAAsDJ,EAASC,SAC/DN,EAAOK,OAIdK,OAAM,SAACD,GACJT,EAAOS,W,iCAKLE,GACd,OAAO,IAAIb,SAAc,SAACC,EAASC,GAC/BC,IAAMc,OAAN,yBAA+BJ,GAAM,CAAER,QAASP,IAE3CQ,MAAK,SAACC,GACEA,EAASC,OAAS,IAAO,IAC1BP,EAAQM,EAASE,OAEjBC,QAAQC,MAAR,+CAAsDJ,EAASC,SAC/DN,EAAOK,OAIdK,OAAM,SAACD,GACJT,EAAOS,a,mOC/F3B,IAAMO,EAAkB,gBAEHC,E,WAEjB,aAAe,oBAENtB,aAAauB,QAAQF,IACtBrB,aAAawB,QAAQH,EAASI,KAAKC,UAAU,IAAIC,Q,sDAKvCC,EAAaC,GAC3B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,I,kCAIrD,OAAOH,KAAKQ,MAAMC,OAAOlC,aAAauB,QAAQF,O,gCAGhCc,GACdnC,aAAawB,QAAQH,EAASI,KAAKC,UAAUS,M,+BAGhC,IAAD,OACZ,OAAO,IAAIhC,SAAqB,SAACC,GAC7BgC,YAAW,WACPhC,EACI,EAAKiC,eAEV,EAAKC,UAAU,IAAK,W,8BAIhBtB,GAAiC,IAAD,OAC3C,OAAO,IAAIb,SAAmB,SAACC,EAASC,GACpC+B,YAAW,WACP,IAEMG,EAFqB,EAAKF,YAEbG,MAAK,SAAAC,GAAI,OAAIA,EAAKzB,KAAOA,KACxCuB,GAAMnC,EAAQmC,GAElBlC,EAAO,IAAIqC,MAAM,2BAClB,EAAKJ,UAAU,IAAK,W,6BAIjBtB,EAAYC,GAA0C,IAAD,OAC/D,OAAO,IAAId,SAAmB,SAACC,EAASC,GACpC+B,YAAW,WAEP,IAAMD,EAAqB,EAAKE,YAEhCF,EAAMQ,SAAQ,SAAAJ,GACNA,EAAKvB,KAAOA,IACZ4B,OAAOC,OAAON,EAAMtB,GACpB,EAAK6B,UAAUX,GACf/B,EAAQa,OAIhBZ,EAAO,IAAIqC,MAAM,2BAClB,EAAKJ,UAAU,IAAK,W,6BAIjBrB,GAA0C,IAAD,OACnD,OAAO,IAAId,SAAmB,SAACC,GAC3BgC,YAAW,WACP,IAAMD,EAAqB,EAAKE,YAC1BU,E,yVAAkB,IAAQ9B,EAAR,CAAkBD,GAAImB,EAAMa,OAAS,IAC7Db,EAAMc,KAAKF,GACX,EAAKD,UAAUX,GAEf/B,EAAQ2C,KACT,EAAKT,UAAU,IAAK,W,iCAIbtB,GAA4B,IAAD,OACzC,OAAO,IAAIb,SAAc,SAACC,GACtBgC,YAAW,WACP,IAAMD,EAAqB,EAAKE,YAC1Ba,EAAQf,EAAMgB,WAAU,SAAAZ,GAAI,OAAIA,EAAKvB,KAAOA,KAC9CkC,GAAOf,EAAMiB,OAAOF,EAAO,GAC/B,EAAKJ,UAAUX,GAEf/B,MACD,EAAKkC,UAAU,IAAK,a,KCvFtBe,EAAwB,SAACC,GAClC,OAAQA,GACJ,KAAKxD,EAAeC,SAChB,OAAO,IAAIG,EAEf,QACI,OAAO,IAAIoB,ICRjBiC,EAAoBC,IAAMC,cAAc,IAEjCC,EAAqBH,EAAkBI,SACrCJ,I,8NCgBf,IAiHeK,EAjHF,SAACC,GAEV,IAAMC,EACFT,EAAsBU,qBAAWR,IAH4C,EAKjCS,mBAAoBnE,EAAUoE,SALG,mBAK1EC,EAL0E,KAKxDC,EALwD,KAO3EC,EAAkB,WACpBD,EAAoBtE,EAAUwE,SAC9BP,EAAYQ,OAAOT,EAAMtB,KAAKvB,G,yVAA9B,IAAuC6C,EAAMtB,KAA7C,CAAmDgC,YAAY,KAE1D9D,MAAK,SAAC+D,GAEHL,EAAoBtE,EAAUoE,SAE9BJ,EAAMY,SAASZ,EAAMtB,KAAKvB,OAG7BD,OAAM,SAAAD,GACHD,QAAQC,MAAR,qBACAqD,EAAoBtE,EAAUiB,OAC9BsB,YAAW,WACP+B,EAAoBtE,EAAUoE,WAC/B,SAqBf,OACI,6BACI,kBAACS,EAAA,EAAD,CAAMC,OAAQ,CAAEC,KAAM,CAAEC,UAAW,YAAeC,OAAQ,CAAEC,QAAS,EAAGC,YAAa,EAAGC,MAAO,OAAQC,SAAU,2BAG7G,kBAACR,EAAA,EAAKS,QAAN,CAAcL,OAAQ,CAAEC,QAAS,IAC7B,kBAACK,EAAA,EAAD,CAAOC,YAAU,EAACP,OAAQ,CAAEE,YAAa,KACrC,kBAACM,EAAA,EAAD,KACKzB,EAAMtB,KAAKgD,aACR,kBAACC,EAAA,EAAD,CAAMb,OAAQ,CAAEC,KAAM,CAAEa,SAAUC,IAAUC,UAAaC,SAAS,mBAEpE/B,EAAMtB,KAAKgD,aACT,kBAACC,EAAA,EAAD,CAAMb,OAAQ,CAAEC,KAAM,CAAEa,SAAUC,IAAUC,UAAaC,SAAS,sBAG1E,kBAACN,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACC,EAAA,EAAD,CAAMnB,OAAQ,CAAEC,KAAM,CAAEa,SAAUC,IAAUK,UACvClC,EAAMtB,KAAKyD,SAQ3BnC,EAAMtB,KAAK0D,aACR,kBAACvB,EAAA,EAAKS,QAAN,CAAcL,OAAQ,CAAEC,QAAS,GAAKJ,OAAQ,CAAEC,KAAM,CAAEsB,UAAU,aAAD,OAAeC,IAAeC,sBAC3F,kBAACN,EAAA,EAAD,KAAOjC,EAAMtB,KAAK0D,cAK1B,kBAACvB,EAAA,EAAKS,QAAN,CAAcL,OAAQ,CAAEC,QAAS,GAAKsB,gBAAiB,MAAOhB,YAAU,EAACV,OAAQ,CAAEC,KAAM,CAAEsB,UAAU,aAAD,OAAeC,IAAeC,sBAG7HlC,IAAqBrE,EAAUwE,SAC5B,kBAACiB,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACS,EAAA,EAAD,OAKPpC,IAAqBrE,EAAUiB,OAC5B,kBAACwE,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACU,EAAA,EAAD,CAAYC,eAAgBC,IAAe3F,OAA3C,sBAON+C,EAAMtB,KAAKgC,YACTL,IAAqBrE,EAAUoE,SAC/B,kBAACqB,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACU,EAAA,EAAD,CAAYC,eAAgBC,IAAeC,SAA3C,eAKR,kBAACC,EAAA,EAAD,CAAYC,QAAS,kBAAMxC,KACvByC,SAAUhD,EAAMtB,KAAKgC,WACrBuC,UAAW,CAAElB,SAAU,eAC3B,kBAACe,EAAA,EAAD,CAAYC,QAAS,kBA9EjCzC,EAAoBtE,EAAUwE,cAC9BP,EAAYiD,WAAWlD,EAAMtB,KAAKvB,IAE7BP,MAAK,WACFoD,EAAMmD,SAASnD,EAAMtB,KAAKvB,OAG7BD,OAAM,SAAAD,GACHD,QAAQC,MAAR,qBACAqD,EAAoBtE,EAAUiB,OAC9BsB,YAAW,WACP+B,EAAoBtE,EAAUoE,WAC/B,SAkE6C6C,UAAW,CAAElB,SAAU,oB,SCsDxEqB,EA3KE,SAACpD,GAEd,IAAMC,EACFT,EAAsBU,qBAAWR,IAHW,EAKxBS,mBAAiB9B,UALO,mBAKzC8D,EALyC,KAKnCkB,EALmC,OAMVlD,mBAAiB9B,UANP,mBAMzC+D,EANyC,KAM5BkB,EAN4B,OAOVnD,wBAA8BoD,GAPpB,mBAOzC7B,EAPyC,KAO5B8B,EAP4B,OASArD,mBAAoBnE,EAAUoE,SAT9B,mBASzCC,EATyC,KASvBC,EATuB,KAoDhD,OACI,6BACI,6BACI,kBAACO,EAAA,EAAD,CAAMC,OAAQ,CAAEC,KAAM,CAAEC,UAAW,YAAeC,OAAQ,CAAEC,QAAS,EAAGC,YAAa,EAAGC,MAAO,OAAQC,SAAU,2BAC7G,kBAACR,EAAA,EAAKS,QAAN,CAAcL,OAAQ,CAAEC,QAAS,IAC7B,kBAACK,EAAA,EAAD,CAAOC,YAAU,EAACP,OAAQ,CAAEE,YAAa,KACrC,kBAACM,EAAA,EAAD,KACI,kBAACqB,EAAA,EAAD,CAAYhC,OAAQ,CAAE2C,KAAM,CAAE7B,SAAUC,IAAUC,UAC9CmB,UAAW,CAAElB,SAnB7B,WACZ,OAAQL,GACJ,KAAK,EACD,MAAO,mBACX,KAAK,EACD,MAAO,gBACX,QACI,MAAO,kBAYoCgC,IACvBC,UAAW,CACPC,aAAc,CACV9C,OAAQ,CACJ+C,YAAa,CACTC,UAAW,CACP,IAAO,CACHC,SAAU,SAEd,EAAK,CACDnC,SAAUC,IAAUK,YAMxC8B,eAAe,EACf1F,MAAO,CACH,CACI2F,IAAK,eACL9B,KAAM,SACN+B,MAAO,gBACPnB,QAAS,kBAAMS,GAAe,IAC9BP,UAAW,CAAElB,SAAU,qBAE3B,CACIkC,IAAK,YACL9B,KAAM,YACN+B,MAAO,YACPnB,QAAS,kBAAMS,GAAe,IAC9BP,UAAW,CAAElB,SAAU,mBAG/BoC,sBAAsB,MAGlC,kBAAC1C,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACoC,EAAA,EAAD,CAAWtD,OAAQ,CACfC,KAAM,GACNsD,MAAO,CAAEzC,SAAUC,IAAUK,QAC7BoC,WAAY,CACRC,WAAY,OACZT,UAAW,CACP,UAAW,CACPS,WAAYjC,IAAekC,UAKvCC,YAAa,sBACbC,MAAOvC,EACPwC,YAAU,EACVC,SAAU,SAACC,EAASH,GAAV,OAAoBrB,EAAQhF,OAAOqG,UAK7D,kBAAC7D,EAAA,EAAKS,QAAN,CAAcL,OAAQ,CAAEC,QAAS,GAAKJ,OAAQ,CAAEC,KAAM,CAAEsB,UAAU,aAAD,OAAeC,IAAeC,sBAC3F,kBAAC6B,EAAA,EAAD,CAAWtD,OAAQ,CACfC,KAAM,GACNuD,WAAY,CACRC,WAAY,OACZT,UAAW,CACP,UAAW,CACPS,WAAYjC,IAAekC,UAKvCC,YAAa,4BACbC,MAAOtC,EACP0C,WAAW,EACXC,kBAAgB,EAChBC,WAAS,EACTL,YAAU,EACVC,SAAU,SAACC,EAASH,GAAV,OAAoBpB,EAAejF,OAAOqG,QAI5D,kBAAC7D,EAAA,EAAKS,QAAN,CAAcL,OAAQ,CAAEC,QAAS,GAAKsB,gBAAiB,MAAOhB,YAAU,EAACV,OAAQ,CAAEC,KAAM,CAAEsB,UAAU,aAAD,OAAeC,IAAeC,sBAC7HlC,IAAqBrE,EAAUwE,SAC5B,kBAACiB,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACS,EAAA,EAAD,OAIPpC,IAAqBrE,EAAU6G,SAC5B,kBAACpB,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACU,EAAA,EAAD,CAAYC,eAAgBC,IAAeC,SAA3C,qBAMPxC,IAAqBrE,EAAUiB,OAC5B,kBAACwE,EAAA,EAAD,CAAWO,MAAI,GACX,kBAACU,EAAA,EAAD,CAAYC,eAAgBC,IAAe3F,OAA3C,6BAKR,kBAAC6F,EAAA,EAAD,CAAYC,QAAS,kBArJrCzC,EAAoBtE,EAAUwE,cAGV+C,IAAhB7B,GAA2B8B,GAAe,QAC9CvD,EAAYgF,OAAO,CAAE9C,OAAMC,cAAa1B,YAAY,EAAOgB,gBAEtD9E,MAAK,SAACsC,GACHoB,EAAoBtE,EAAU6G,SAC9B7C,EAAMkF,SAAShG,GAGfmE,EAAQhF,UACRiF,EAAejF,UACfmF,OAAeD,MAGlBrG,OAAM,SAAAD,GACHD,QAAQC,MAAM,oBACdqD,EAAoBtE,EAAUiB,UAGjCkI,SAAQ,WAEL5G,YAAW,WACP+B,EAAoBtE,EAAUoE,WAC/B,SA6HS4C,UAAWb,GAAQ9B,IAAqBrE,EAAUwE,QAClDyC,UAAW,CAAElB,SAAU,cC5EpCqD,EApFO,WAAO,IAAD,EAEQjF,mBAAS,IAAIrC,OAFrB,mBAEnBuH,EAFmB,KAERC,EAFQ,KAIpBrF,EACJT,EAAsBU,qBAAWR,IA0CnC,OAVA6F,qBAAU,WACRtF,EAAYuF,SAET5I,MAAK,SAAC6I,GAAD,OAAwBH,EAAaG,MAE1CvI,OAAM,SAAAD,GAAK,OAAID,QAAQC,MAAMA,QAE/B,IAID,yBAAKyI,MAAO,CAAE1E,UAAW,WACvB,kBAACiB,EAAA,EAAD,CAAMnB,OAAQ,CAAEC,KAAM,CAAEa,SAAUC,IAAU8D,SAA5C,wBACA,6BAEEN,GACA,kBAACpD,EAAA,EAAD,CAAMnB,OAAQ,CACZC,KAAM,CACJa,SAAUC,IAAU+D,OACpBC,WAAYC,IAAYC,UACxBjC,UAAW,CAAE,KAAQ,CAAE+B,WAAYC,IAAYE,cAJnD,WAMW,8BAAOX,EAAUlG,QAN5B,mBAQF,kBAACoC,EAAA,EAAD,CAAOT,OAAQ,CACbC,KAAM,CACJkF,OAAQ,OACR5E,SAAU,MACV0C,SAAU,MAEX9C,OAAQ,CAAEE,YAAa,GAAID,QAAS,IACrC,kBAACO,EAAA,EAAD,CAAWX,OAAQ,CAAEC,KAAM,CAAEmF,gBAAiB5D,IAAe6D,oBAAuBnE,KAAM,GACxF,kBAAC,EAAD,CAAUkD,SAAU,SAAC9H,GAAD,OAxCZ,SAACA,GACfJ,QAAQoJ,IAAR,uBAA4BhJ,EAASD,KAGrCmI,EAAaD,EAAUgB,OAAOjJ,IAoCqBkJ,CAAQlJ,OAEvD,kBAACmJ,EAAA,EAAD,MACClB,EAAUmB,KAAI,SAAC5H,GACd,OACE,kBAAC6C,EAAA,EAAD,CAAWwC,IAAKrF,EAAKzB,GAAI2D,OAAQ,CAAEC,KAAM,CAAEmF,gBAAiB5D,IAAe6D,oBAAuBnE,KAAM,GACtG,kBAAC,EAAD,CAAMtD,KAAME,EAAMgC,SAAU,SAACzD,GAAD,OApEf,SAACA,GACxBH,QAAQoJ,IAAR,0BAA+BjJ,IAE/B8C,EAAYwG,QAAQtJ,GAEjBP,MAAK,SAAAQ,GAEJkI,EAAaD,EAAUmB,KAAI,SAAA9H,GACzB,OAAIA,EAAKvB,KAAOC,EAASD,GAChBC,EAEFsB,SAyDyCgI,CAAiBvJ,IAAKgG,SAAU,SAAChG,GAAD,OApDrE,SAACA,GAClBH,QAAQoJ,IAAR,yBAA8BjJ,IAE9BmI,EAAaD,EAAUsB,QAAO,SAAAjI,GAAI,OAAIA,EAAKvB,KAAOA,MAiDoDyJ,CAAWzJ,aC5EjG0J,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCTNC,cAGAlK,QAAQoJ,IAAIU,OAAOC,SAASC,UAC5B,IAAIG,EAAyBlL,EAAeE,aACxC2K,OAAOC,SAASC,SAASI,SAAS,eAClCD,EAAiBlL,EAAeE,cAGpCkL,IAASC,OACL,kBAACzH,EAAD,CAAoB6E,MAAOyC,GACvB,kBAACI,EAAA,EAAD,KACI,kBAAC,EAAD,QAGNC,SAASC,eAAe,SDiHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhL,MAAK,SAAAiL,GACjCA,EAAaC,kB","file":"static/js/main.d70c561b.chunk.js","sourcesContent":["export enum AjaxState {\n    initial, pending, success, error\n}\n","export default abstract class DataSourceType {\n    public static localAPI = 'local-api';\n    public static localStorage = 'local-storage';\n}","import Axios, { AxiosResponse, AxiosError } from 'axios';\nimport ITodoItem from '../models/ITodoItem.model';\nimport ITodoService from './todo-service.interface';\n\nconst BASE_URL: string = 'https://localhost:5001/';\n\nexport default class TodoService implements ITodoService {\n\n    public getAll(): Promise<ITodoItem[]> {\n        return new Promise<ITodoItem[]>((resolve, reject) => {\n            Axios.get(`/api/todoitems`, { baseURL: BASE_URL, })\n\n                .then((response: AxiosResponse) => {\n                    if (response.status === 200) {\n                        resolve(response.data);\n                    } else {\n                        console.error(`Status does not indicate success! -> ${response.status}`);\n                        reject(response);\n                    }\n                })\n\n                .catch((error: AxiosError) => {\n                    reject(error);\n                });\n        });\n    }\n\n    public getById(id: number): Promise<ITodoItem> {\n        return new Promise<ITodoItem>((resolve, reject) => {\n            Axios.get(`/api/todoitems/${id}`, { baseURL: BASE_URL, })\n\n                .then((response: AxiosResponse) => {\n                    if ((response.status % 200) < 100) {\n                        resolve(response.data);\n                    } else {\n                        console.error(`Status does not indicate success! -> ${response.status}`);\n                        reject(response);\n                    }\n                })\n\n                .catch((error: AxiosError) => {\n                    reject(error);\n                });\n        });\n    }\n\n    public update(id: number, todoItem: ITodoItem): Promise<ITodoItem> {\n        return new Promise<ITodoItem>((resolve, reject) => {\n            Axios.put(`/api/todoItems/${id}`, todoItem, { baseURL: BASE_URL })\n\n                .then((response: AxiosResponse) => {\n                    if ((response.status % 200) < 100) {\n                        resolve(response.data);\n                    } else {\n                        console.error(`Status does not indicate success! -> ${response.status}`);\n                        reject(response);\n                    }\n                })\n\n                .catch((error: AxiosError) => {\n                    reject(error);\n                });\n        });\n    }\n\n    public create(todoItem: ITodoItem): Promise<ITodoItem> {\n        return new Promise<ITodoItem>((resolve, reject) => {\n            Axios.post(`/api/todoItems/`, todoItem, { baseURL: BASE_URL })\n\n                .then((response: AxiosResponse) => {\n                    if ((response.status % 200) < 100) {\n                        resolve(response.data);\n                    } else {\n                        console.error(`Status does not indicate success! -> ${response.status}`);\n                        reject(response);\n                    }\n                })\n\n                .catch((error: AxiosError) => {\n                    reject(error);\n                });\n        });\n    }\n\n    public deleteById(id: number): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            Axios.delete(`/api/todoitems/${id}`, { baseURL: BASE_URL, })\n\n                .then((response: AxiosResponse) => {\n                    if ((response.status % 200) < 100) {\n                        resolve(response.data);\n                    } else {\n                        console.error(`Status does not indicate success! -> ${response.status}`);\n                        reject(response);\n                    }\n                })\n\n                .catch((error: AxiosError) => {\n                    reject(error);\n                });\n        });\n    }\n\n}\n","import ITodoItem from '../models/ITodoItem.model';\nimport ITodoService from './todo-service.interface';\n\nconst DB_NAME: string = 'todo-Database';\n\nexport default class TodoLocalStorateService implements ITodoService {\n\n    constructor() {\n        // init local storage db\n        if (!localStorage.getItem(DB_NAME)) {\n            localStorage.setItem(DB_NAME, JSON.stringify(new Array<ITodoItem>()));\n        }\n    }\n\n    // pretend to be remote data\n    private _getDelay(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    private _getItems(): ITodoItem[] {\n        return JSON.parse(String(localStorage.getItem(DB_NAME)));\n    }\n\n    private _setItems(items: ITodoItem[]): void {\n        localStorage.setItem(DB_NAME, JSON.stringify(items));\n    }\n\n    public getAll() {\n        return new Promise<ITodoItem[]>((resolve) => {\n            setTimeout(() => {\n                resolve(\n                    this._getItems()\n                );\n            }, this._getDelay(100, 1000));\n        });\n    }\n\n    public getById(id: number): Promise<ITodoItem> {\n        return new Promise<ITodoItem>((resolve, reject) => {\n            setTimeout(() => {\n                const items: ITodoItem[] = this._getItems();\n\n                const item = items.find(todo => todo.id === id);\n                if (item) resolve(item);\n\n                reject(new Error('Item does not exist!'));\n            }, this._getDelay(100, 1000));\n        });\n    }\n\n    public update(id: number, todoItem: ITodoItem): Promise<ITodoItem> {\n        return new Promise<ITodoItem>((resolve, reject) => {\n            setTimeout(() => {\n\n                const items: ITodoItem[] = this._getItems();\n\n                items.forEach(item => {\n                    if (item.id === id) {\n                        Object.assign(item, todoItem);\n                        this._setItems(items);\n                        resolve(todoItem);\n                    }\n                });\n\n                reject(new Error('Item does not exist!'));\n            }, this._getDelay(100, 1000));\n        });\n    }\n\n    public create(todoItem: ITodoItem): Promise<ITodoItem> {\n        return new Promise<ITodoItem>((resolve) => {\n            setTimeout(() => {\n                const items: ITodoItem[] = this._getItems();\n                const newItem: ITodoItem = { ...todoItem, id: items.length + 1 };\n                items.push(newItem);\n                this._setItems(items);\n\n                resolve(newItem);\n            }, this._getDelay(100, 1000));\n        });\n    }\n\n    public deleteById(id: number): Promise<void> {\n        return new Promise<void>((resolve) => {\n            setTimeout(() => {\n                const items: ITodoItem[] = this._getItems();\n                const index = items.findIndex(item => item.id === id);\n                if (index) items.splice(index, 1);\n                this._setItems(items);\n                \n                resolve();\n            }, this._getDelay(100, 1000));\n        });\n    }\n}\n","import DataSourceType from '../models/data-source-type.model'\nimport TodoService from './todo.service';\nimport TodoLocalStorateService from './todo-local-storage.service';\n\nexport const initializeTodoService = (dataSourceType: string) => {\n    switch (dataSourceType) {\n        case DataSourceType.localAPI:\n            return new TodoService();\n\n        default:\n            return new TodoLocalStorateService();\n    }\n};\n","import React from 'react'\n\nconst DataSourceContext = React.createContext('')\n\nexport const DataSourceProvider = DataSourceContext.Provider\nexport default DataSourceContext","import React, { useState, useContext } from 'react';\nimport { Card, } from '@uifabric/react-cards';\nimport {\n    Text,\n    Icon,\n    IconButton,\n    StackItem,\n    Stack,\n    FontSizes,\n    DefaultPalette,\n    MessageBar,\n    MessageBarType,\n    ProgressIndicator\n} from 'office-ui-fabric-react';\n\nimport ITodoItem from '../models/ITodoItem.model';\nimport ITodoService from '../services/todo-service.interface';\nimport { AjaxState } from '../enums/ajax-state.enum';\nimport { initializeTodoService } from '../services/todo-service-helper';\nimport DataSourceContext from '../contexts/data-source.context';\n\nconst Todo = (props: { item: ITodoItem, onUpdate: Function, onDelete: Function }) => {\n\n    const todoService: ITodoService =\n        initializeTodoService(useContext(DataSourceContext));\n\n    const [submissionStatus, setSubmissionStatus] = useState<AjaxState>(AjaxState.initial);\n\n    const clickedComplete = () => {\n        setSubmissionStatus(AjaxState.pending);\n        todoService.update(props.item.id, { ...props.item, isComplete: true, })\n\n            .then((updatedTodo: ITodoItem) => {\n                // set initial because we already have a message bar for completed todos\n                setSubmissionStatus(AjaxState.initial);\n\n                props.onUpdate(props.item.id);\n            })\n\n            .catch(error => {\n                console.error(`Failed to update!`);\n                setSubmissionStatus(AjaxState.error);\n                setTimeout(() => {\n                    setSubmissionStatus(AjaxState.initial);\n                }, 3000);\n            });\n    };\n\n    const clickedDelete = () => {\n        setSubmissionStatus(AjaxState.pending);\n        todoService.deleteById(props.item.id)\n\n            .then(() => {\n                props.onDelete(props.item.id);\n            })\n\n            .catch(error => {\n                console.error(`Failed to delete!`);\n                setSubmissionStatus(AjaxState.error);\n                setTimeout(() => {\n                    setSubmissionStatus(AjaxState.initial);\n                }, 3000);\n            });\n    };\n\n    return (\n        <div>\n            <Card styles={{ root: { textAlign: 'initial' } }} tokens={{ padding: 5, childrenGap: 5, width: '100%', maxWidth: '-webkit-fill-available' }}>\n\n                {/* HEADING */}\n                <Card.Section tokens={{ padding: 4 }}>\n                    <Stack horizontal tokens={{ childrenGap: 12 }}>\n                        <StackItem>\n                            {props.item.isImportant &&\n                                <Icon styles={{ root: { fontSize: FontSizes.xxLarge } }} iconName=\"LightningBolt\"></Icon>\n                            }\n                            {!props.item.isImportant &&\n                                <Icon styles={{ root: { fontSize: FontSizes.xxLarge } }} iconName=\"DietPlanNotebook\"></Icon>\n                            }\n                        </StackItem>\n                        <StackItem grow>\n                            <Text styles={{ root: { fontSize: FontSizes.xLarge } }}>\n                                {props.item.name}\n                            </Text>\n                        </StackItem>\n                    </Stack>\n\n                </Card.Section>\n\n                {/* DESCRIPTION */}\n                {props.item.description &&\n                    <Card.Section tokens={{ padding: 4 }} styles={{ root: { borderTop: `solid 1px ${DefaultPalette.neutralQuaternary}` } }}>\n                        <Text>{props.item.description}</Text>\n                    </Card.Section>\n                }\n\n                {/* BUTTONS & MESSAGES*/}\n                <Card.Section tokens={{ padding: 4 }} horizontalAlign={\"end\"} horizontal styles={{ root: { borderTop: `solid 1px ${DefaultPalette.neutralQuaternary}` } }}>\n\n                    {/* AJAX STATE */}\n                    {submissionStatus === AjaxState.pending &&\n                        <StackItem grow>\n                            <ProgressIndicator />\n                        </StackItem>\n                    }\n\n                    {/* AJAX STATE */}\n                    {submissionStatus === AjaxState.error &&\n                        <StackItem grow>\n                            <MessageBar messageBarType={MessageBarType.error}>\n                                Operation failed!\n                                </MessageBar>\n                        </StackItem>\n                    }\n\n                    {/* COMLETION INDICATOR */}\n                    {(props.item.isComplete &&\n                        submissionStatus === AjaxState.initial) &&\n                        <StackItem grow>\n                            <MessageBar messageBarType={MessageBarType.success}>\n                                Completed!\n                            </MessageBar>\n                        </StackItem>\n                    }\n                    <IconButton onClick={() => clickedComplete()}\n                        disabled={props.item.isComplete}\n                        iconProps={{ iconName: 'Completed' }}></IconButton>\n                    <IconButton onClick={() => clickedDelete()} iconProps={{ iconName: 'RecycleBin' }}></IconButton>\n                </Card.Section>\n            </Card>\n        </div>\n    )\n}\n\nexport default Todo;\n","import React, { useState, useContext } from 'react'\nimport { Card } from '@uifabric/react-cards';\nimport { Stack, StackItem, MessageBar, MessageBarType, IconButton, TextField, ProgressIndicator } from 'office-ui-fabric-react';\nimport { FontSizes, DefaultPalette } from '@uifabric/styling';\nimport ITodoService from '../services/todo-service.interface';\nimport ITodoItem from '../models/ITodoItem.model';\nimport { AjaxState } from '../enums/ajax-state.enum';\nimport { initializeTodoService } from '../services/todo-service-helper';\nimport DataSourceContext from '../contexts/data-source.context';\n\nconst TodoForm = (props: { onCreate: Function }) => {\n\n    const todoService: ITodoService =\n        initializeTodoService(useContext(DataSourceContext));\n\n    const [name, setName] = useState<string>(String());\n    const [description, setDescription] = useState<string>(String());\n    const [isImportant, setIsImportant] = useState<boolean | undefined>(undefined);\n\n    const [submissionStatus, setSubmissionStatus] = useState<AjaxState>(AjaxState.initial);\n\n    const clickedSubmit = () => {\n        setSubmissionStatus(AjaxState.pending);\n\n        // use non important as default\n        if (isImportant === undefined) setIsImportant(false);\n        todoService.create({ name, description, isComplete: false, isImportant } as ITodoItem)\n\n            .then((newItem: ITodoItem) => {\n                setSubmissionStatus(AjaxState.success);\n                props.onCreate(newItem);\n\n                // reset fields for next todo\n                setName(String());\n                setDescription(String());\n                setIsImportant(undefined);\n            })\n\n            .catch(error => {\n                console.error('Failed to create');\n                setSubmissionStatus(AjaxState.error);\n            })\n\n            .finally(() => {\n                // reset submission button\n                setTimeout(() => {\n                    setSubmissionStatus(AjaxState.initial);\n                }, 3000);\n            })\n    };\n\n    const getIcon = () => {\n        switch (isImportant) {\n            case false:\n                return 'DietPlanNotebook';\n            case true:\n                return 'LightningBolt';\n            default:\n                return 'CircleAddition';\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                <Card styles={{ root: { textAlign: 'initial' } }} tokens={{ padding: 5, childrenGap: 5, width: '100%', maxWidth: '-webkit-fill-available' }}>\n                    <Card.Section tokens={{ padding: 4 }}>\n                        <Stack horizontal tokens={{ childrenGap: 12 }}>\n                            <StackItem>\n                                <IconButton styles={{ icon: { fontSize: FontSizes.xxLarge } }}\n                                    iconProps={{ iconName: getIcon() }}\n                                    menuProps={{\n                                        calloutProps: {\n                                            styles: {\n                                                calloutMain: {\n                                                    selectors: {\n                                                        'div': {\n                                                            minWidth: 'unset',\n                                                        },\n                                                        'i': {\n                                                            fontSize: FontSizes.xLarge\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        },\n                                        isBeakVisible: true,\n                                        items: [\n                                            {\n                                                key: 'nonImportant',\n                                                name: 'Common',\n                                                title: 'not important',\n                                                onClick: () => setIsImportant(false),\n                                                iconProps: { iconName: 'DietPlanNotebook' }\n                                            },\n                                            {\n                                                key: 'Important',\n                                                name: 'Important',\n                                                title: 'important',\n                                                onClick: () => setIsImportant(true),\n                                                iconProps: { iconName: 'LightningBolt' }\n                                            }\n                                        ],\n                                        directionalHintFixed: true\n                                    }} ></IconButton>\n                            </StackItem>\n                            <StackItem grow>\n                                <TextField styles={{\n                                    root: {},\n                                    field: { fontSize: FontSizes.xLarge },\n                                    fieldGroup: {\n                                        background: 'none',\n                                        selectors: {\n                                            '&:hover': {\n                                                background: DefaultPalette.white\n                                            }\n                                        }\n                                    }\n                                }}\n                                    placeholder={'Add your title here'}\n                                    value={name}\n                                    borderless\n                                    onChange={(element, value) => setName(String(value))}></TextField>\n                            </StackItem>\n                        </Stack>\n\n                    </Card.Section>\n                    <Card.Section tokens={{ padding: 4 }} styles={{ root: { borderTop: `solid 1px ${DefaultPalette.neutralQuaternary}` } }}>\n                        <TextField styles={{\n                            root: {},\n                            fieldGroup: {\n                                background: 'none',\n                                selectors: {\n                                    '&:hover': {\n                                        background: DefaultPalette.white\n                                    }\n                                }\n                            }\n                        }}\n                            placeholder={'Add your description here'}\n                            value={description}\n                            resizable={false}\n                            autoAdjustHeight\n                            multiline\n                            borderless\n                            onChange={(element, value) => setDescription(String(value))}></TextField>\n                    </Card.Section>\n\n                    {/* BUTTONS & MESSAGES*/}\n                    <Card.Section tokens={{ padding: 4 }} horizontalAlign={\"end\"} horizontal styles={{ root: { borderTop: `solid 1px ${DefaultPalette.neutralQuaternary}` } }}>\n                        {submissionStatus === AjaxState.pending &&\n                            <StackItem grow>\n                                <ProgressIndicator />\n                            </StackItem>\n                        }\n\n                        {submissionStatus === AjaxState.success &&\n                            <StackItem grow>\n                                <MessageBar messageBarType={MessageBarType.success}>\n                                    Added your todo!\n                                </MessageBar>\n                            </StackItem>\n                        }\n\n                        {submissionStatus === AjaxState.error &&\n                            <StackItem grow>\n                                <MessageBar messageBarType={MessageBarType.error}>\n                                    Could not add your todo!\n                                </MessageBar>\n                            </StackItem>\n                        }\n                        <IconButton onClick={() => clickedSubmit()}\n                            disabled={!name || submissionStatus === AjaxState.pending}\n                            iconProps={{ iconName: 'Add' }}></IconButton>\n                    </Card.Section>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoForm;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Separator, Text, Stack, StackItem, FontSizes, DefaultPalette, FontWeights } from 'office-ui-fabric-react';\n\nimport Todo from './todo/todo.component';\nimport ITodoItem from './models/ITodoItem.model';\n\nimport ITodoService from './services/todo-service.interface';\nimport TodoForm from './todo-form/todo-form.component';\nimport DataSourceContext from './contexts/data-source.context';\nimport { initializeTodoService } from './services/todo-service-helper';\n\n// todo set service type dynamically\n\nconst App: React.FC = () => {\n\n  const [todoItems, setTodoItems] = useState(new Array<ITodoItem>());\n\n  const todoService: ITodoService =\n    initializeTodoService(useContext(DataSourceContext));\n\n  const reloadSingleItem = (id: number) => {\n    console.log(`Reloading item: ${id}`);\n\n    todoService.getById(id)\n\n      .then(todoItem => {\n        // replace updated item\n        setTodoItems(todoItems.map(item => {\n          if (item.id === todoItem.id) {\n            return todoItem\n          };\n          return item;\n        }));\n      })\n  };\n\n  const removeItem = (id: number) => {\n    console.log(`Removing item: ${id}`);\n\n    setTodoItems(todoItems.filter(item => item.id !== id));\n  };\n\n  const addItem = (todoItem: ITodoItem) => {\n    console.log(`Adding item: ${todoItem.id}`);\n\n    // Array.prototyle.push return new length instead of new array -> I use concat\n    setTodoItems(todoItems.concat(todoItem));\n  }\n\n  //component did mount\n  useEffect(() => {\n    todoService.getAll()\n\n      .then((todos: ITodoItem[]) => setTodoItems(todos))\n\n      .catch(error => console.error(error));\n    // eslint-disable-next-line\n  }, []);\n\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Text styles={{ root: { fontSize: FontSizes.large } }}>My todo app in react</Text>\n      <br />\n      {\n        todoItems &&\n        <Text styles={{\n          root: {\n            fontSize: FontSizes.medium,\n            fontWeight: FontWeights.semilight,\n            selectors: { 'span': { fontWeight: FontWeights.semibold } }\n          }\n        }}>I found <span>{todoItems.length}</span> todos for you.</Text>\n      }\n      <Stack styles={{\n        root: {\n          margin: 'auto',\n          maxWidth: '60%',\n          minWidth: 350\n        }\n      }} tokens={{ childrenGap: 12, padding: 8 }}>\n        <StackItem styles={{ root: { backgroundColor: DefaultPalette.neutralLighterAlt } }} grow={1} >\n          <TodoForm onCreate={(todoItem: ITodoItem) => addItem(todoItem)}></TodoForm>\n        </StackItem>\n        <Separator></Separator>\n        {todoItems.map((todo) => {\n          return (\n            <StackItem key={todo.id} styles={{ root: { backgroundColor: DefaultPalette.neutralLighterAlt } }} grow={1} >\n              <Todo item={todo} onUpdate={(id: number) => reloadSingleItem(id)} onDelete={(id: number) => removeItem(id)}></Todo>\n            </StackItem>\n          );\n        })}\n      </Stack>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeIcons } from '@uifabric/icons';\nimport { Fabric } from 'office-ui-fabric-react';\nimport { DataSourceProvider } from './contexts/data-source.context';\nimport DataSourceType from './models/data-source-type.model';\n\ninitializeIcons();\n\n// initialize data type context\nconsole.log(window.location.hostname);\nlet dataSourcetype: string = DataSourceType.localStorage;\nif (window.location.hostname.includes('github.io')) {\n    dataSourcetype = DataSourceType.localStorage;\n}\n\nReactDOM.render(\n    <DataSourceProvider value={dataSourcetype}>\n        <Fabric>\n            <App />\n        </Fabric>\n    </DataSourceProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}